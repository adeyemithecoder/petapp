// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id                String             @id @default(auto()) @map("_id") @db.ObjectId
  name              String
  email             String             @unique
  phone             String
  password          String
  country           String
  resetToken        String?            @default("")
  resetCode         String?            @default("")
  advertPin         String?            @default("")
  pinValidity       String?            @default("")
  image             String?            @default("")
  imageId           String?            @default("")
  role              Role               @default(USER)
  address           String?
  block             Boolean            @default(false)
  blockCount        Int                @default(0)
  lastActive        DateTime?
  expoPushToken     String?
  notificationsSent NotificationsSent?
  ads               Ad[]               @relation("UserAds")
  seenAds           SeenAd[]
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  stations          Station[]          @relation(name: "UserStations")
  Order             Order[]
  Review            Review[]
}

model Station {
  id                String   @id @default(auto()) @map("_id") @db.ObjectId
  name              String
  image             String?  @default("")
  imageId           String?  @default("")
  pms               Int?
  ago               Int?
  address           String
  supportedOrdering Boolean  @default(false)
  email             String
  operatingHours    String
  availableProducts String[]
  paymentMethods    String[]
  facilities        String[]
  ownerId           String?  @db.ObjectId
  owner             User?    @relation(fields: [ownerId], references: [id], onDelete: Cascade, name: "UserStations")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Review {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @db.ObjectId
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  content   String
  rating    Int      @default(5) // optional: allow 1â€“5 star rating
  createdAt DateTime @default(now())
}

model Order {
  id               String   @id @default(auto()) @map("_id") @db.ObjectId
  userId           String   @db.ObjectId
  user             User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userName         String
  image            String?  @default("")
  imageId          String?  @default("")
  userPhone        String
  stationName      String
  stationEmail     String
  ownerId          String
  fuelType         String
  completed        Boolean  @default(false)
  litres           Int
  totalAmount      Float
  deliveryAddress  String
  expectedDateTime DateTime
  createdAt        DateTime @default(now())
}

model Ad {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  description String
  category    String
  image       String?  @default("")
  imageId     String?  @default("")
  company     String
  postedAt    DateTime @default(now())
  userId      String   @db.ObjectId
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade, name: "UserAds")
  seenBy      SeenAd[]
}

model SeenAd {
  id     String   @id @default(auto()) @map("_id") @db.ObjectId
  user   User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String   @db.ObjectId
  ad     Ad       @relation(fields: [adId], references: [id], onDelete: Cascade)
  adId   String   @db.ObjectId
  seenAt DateTime @default(now())
}

model AdPricing {
  id       String @id @default(auto()) @map("_id") @db.ObjectId
  duration String @unique
  amount   Int
}

model NotificationsSent {
  id     String @id @default(auto()) @map("_id") @db.ObjectId
  userId String @unique @db.ObjectId
  push   Int    @default(0)
  email  Int    @default(0)
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model EmailVerification {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  email     String   @unique
  code      String
  expiresAt DateTime
  name      String
  phone     String
  password  String
  country   String
}

enum Role {
  USER
  ADMIN
  SUPER_ADMIN
}
